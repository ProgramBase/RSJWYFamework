// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	logupFieldNames          = builder.RawFieldNames(&Logup{})
	logupRows                = strings.Join(logupFieldNames, ",")
	logupRowsExpectAutoSet   = strings.Join(stringx.Remove(logupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	logupRowsWithPlaceHolder = strings.Join(stringx.Remove(logupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLogupIdPrefix = "cache:logup:id:"
)

type (
	logupModel interface {
		Insert(ctx context.Context, data *Logup) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Logup, error)
		Update(ctx context.Context, data *Logup) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLogupModel struct {
		sqlc.CachedConn
		table string
	}

	Logup struct {
		Id            uint64    `db:"id"`            // 日志的ID序号
		ProjectName   string    `db:"ProjectName"`   // 项目名称
		AppName       string    `db:"AppName"`       // app名称
		AppVersion    string    `db:"AppVersion"`    // app版本
		ResourceInfo  string    `db:"ResourceInfo"`  // 资源包信息
		ERRTime       time.Time `db:"ERRTime"`       // 错误发生时间
		ERRType       string    `db:"ERRType"`       // 错误类型
		ERRLog        string    `db:"ERRLog"`        // 错误日志
		ERRStackTrace string    `db:"ERRStackTrace"` // 错误堆栈信息
	}
)

func newLogupModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLogupModel {
	return &defaultLogupModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`logup`",
	}
}

func (m *defaultLogupModel) Delete(ctx context.Context, id uint64) error {
	logupIdKey := fmt.Sprintf("%s%v", cacheLogupIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, logupIdKey)
	return err
}

func (m *defaultLogupModel) FindOne(ctx context.Context, id uint64) (*Logup, error) {
	logupIdKey := fmt.Sprintf("%s%v", cacheLogupIdPrefix, id)
	var resp Logup
	err := m.QueryRowCtx(ctx, &resp, logupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", logupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLogupModel) Insert(ctx context.Context, data *Logup) (sql.Result, error) {
	logupIdKey := fmt.Sprintf("%s%v", cacheLogupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, logupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProjectName, data.AppName, data.AppVersion, data.ResourceInfo, data.ERRTime, data.ERRType, data.ERRLog, data.ERRStackTrace)
	}, logupIdKey)
	return ret, err
}

func (m *defaultLogupModel) Update(ctx context.Context, data *Logup) error {
	logupIdKey := fmt.Sprintf("%s%v", cacheLogupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, logupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProjectName, data.AppName, data.AppVersion, data.ResourceInfo, data.ERRTime, data.ERRType, data.ERRLog, data.ERRStackTrace, data.Id)
	}, logupIdKey)
	return err
}

func (m *defaultLogupModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLogupIdPrefix, primary)
}

func (m *defaultLogupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", logupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLogupModel) tableName() string {
	return m.table
}
